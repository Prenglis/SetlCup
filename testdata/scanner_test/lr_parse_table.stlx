scan_output := [["1", "INTEGER"], ["+", "PLUS"], ["2", "INTEGER"], ["*", "TIMES"], ["3", "INTEGER"], ["-", "MINUS"], ["4", "INTEGER"], [";", "SEMICOLON"], ["1", "INTEGER"], ["+", "PLUS"], ["2", "INTEGER"], ["+", "PLUS"], ["3", "INTEGER"], ["+", "PLUS"], ["4", "INTEGER"], [";", "SEMICOLON"], ["1", "INTEGER"], ["+", "PLUS"], ["(", "LPAREN"], ["2", "INTEGER"], ["-", "MINUS"], ["3", "INTEGER"], [")", "RPAREN"], ["*", "TIMES"], ["5", "INTEGER"], ["%", "MOD"], ["6", "INTEGER"], [";", "SEMICOLON"]];
rulesMap := {};
r0 := Rule("grammar", ["expr_list"]);
rulesMap["r0"] := Rule("grammar", ["expr_list"]);
r1 := Rule("expr_list", ["expr_list", "expr_part"]);
rulesMap["r1"] := Rule("expr_list", ["expr_list", "expr_part"]);
r2 := Rule("expr_list", ["expr_part"]);
rulesMap["r2"] := Rule("expr_list", ["expr_part"]);
r3 := Rule("expr_part", ["expr", "SEMICOLON"]);
rulesMap["r3"] := Rule("expr_part", ["expr", "SEMICOLON"]);
r4 := Rule("expr", ["expr", "PLUS", "prod"]);
rulesMap["r4"] := Rule("expr", ["expr", "PLUS", "prod"]);
r5 := Rule("expr", ["expr", "MINUS", "prod"]);
rulesMap["r5"] := Rule("expr", ["expr", "MINUS", "prod"]);
r6 := Rule("expr", ["prod"]);
rulesMap["r6"] := Rule("expr", ["prod"]);
r7 := Rule("prod", ["prod", "TIMES", "fact"]);
rulesMap["r7"] := Rule("prod", ["prod", "TIMES", "fact"]);
r8 := Rule("prod", ["prod", "DIVIDE", "fact"]);
rulesMap["r8"] := Rule("prod", ["prod", "DIVIDE", "fact"]);
r9 := Rule("prod", ["prod", "MOD", "fact"]);
rulesMap["r9"] := Rule("prod", ["prod", "MOD", "fact"]);
r10 := Rule("prod", ["fact"]);
rulesMap["r10"] := Rule("prod", ["fact"]);
r11 := Rule("fact", ["LPAREN", "expr", "RPAREN"]);
rulesMap["r11"] := Rule("fact", ["LPAREN", "expr", "RPAREN"]);
r12 := Rule("fact", ["INTEGER"]);
rulesMap["r12"] := Rule("fact", ["INTEGER"]);
r13 := Rule("S", ["grammar"]);
rulesMap["r13"] := Rule("S", ["grammar"]);


stateTable := {};
stateTable["s0"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, expr -> (*) expr MINUS prod: {MINUS, PLUS, RPAREN, }, expr -> (*) expr PLUS prod: {MINUS, PLUS, RPAREN, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, expr -> (*) prod: {MINUS, PLUS, RPAREN, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> LPAREN (*) expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, },  }";
stateTable["s1"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, expr -> (*) expr MINUS prod: {MINUS, PLUS, RPAREN, }, expr -> (*) expr PLUS prod: {MINUS, PLUS, RPAREN, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, expr -> (*) prod: {MINUS, PLUS, RPAREN, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> LPAREN (*) expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s2"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, expr -> expr MINUS (*) prod: {MINUS, PLUS, RPAREN, },  }";
stateTable["s3"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, expr -> expr PLUS (*) prod: {MINUS, PLUS, RPAREN, },  }";
stateTable["s4"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod DIVIDE (*) fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, },  }";
stateTable["s5"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod MOD (*) fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, },  }";
stateTable["s6"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod TIMES (*) fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, },  }";
stateTable["s7"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, expr -> (*) expr MINUS prod: {MINUS, PLUS, SEMICOLON, }, expr -> (*) expr PLUS prod: {MINUS, PLUS, SEMICOLON, }, expr_part -> (*) expr SEMICOLON: {\$, INTEGER, LPAREN, }, grammar -> (*) expr_list: {\$}, expr_list -> (*) expr_list expr_part: {\$, INTEGER, LPAREN, }, expr_list -> (*) expr_part: {\$, INTEGER, LPAREN, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, S -> (*) grammar: {\$}, expr -> (*) prod: {MINUS, PLUS, SEMICOLON, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s8"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, expr -> (*) expr MINUS prod: {MINUS, PLUS, SEMICOLON, }, expr -> (*) expr PLUS prod: {MINUS, PLUS, SEMICOLON, }, expr_part -> (*) expr SEMICOLON: {\$, INTEGER, LPAREN, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, expr -> (*) prod: {MINUS, PLUS, SEMICOLON, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, grammar -> expr_list (*): {\$}, expr_list -> expr_list (*) expr_part: {\$, INTEGER, LPAREN, },  }";
stateTable["s9"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, expr -> expr MINUS (*) prod: {MINUS, PLUS, SEMICOLON, },  }";
stateTable["s10"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod MOD fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> (*) prod TIMES fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, expr -> expr PLUS (*) prod: {MINUS, PLUS, SEMICOLON, },  }";
stateTable["s11"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod DIVIDE (*) fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s12"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod MOD (*) fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s13"] := "{ fact -> (*) INTEGER: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, fact -> (*) LPAREN expr RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod TIMES (*) fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s14"] := "{ fact -> INTEGER (*): {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, } }";
stateTable["s15"] := "{ fact -> INTEGER (*): {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, } }";
stateTable["s16"] := "{ fact -> LPAREN expr (*) RPAREN: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, expr -> expr (*) MINUS prod: {MINUS, PLUS, RPAREN, }, expr -> expr (*) PLUS prod: {MINUS, PLUS, RPAREN, },  }";
stateTable["s17"] := "{ fact -> LPAREN expr (*) RPAREN: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, expr -> expr (*) MINUS prod: {MINUS, PLUS, RPAREN, }, expr -> expr (*) PLUS prod: {MINUS, PLUS, RPAREN, },  }";
stateTable["s18"] := "{ fact -> LPAREN expr RPAREN (*): {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, } }";
stateTable["s19"] := "{ fact -> LPAREN expr RPAREN (*): {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, } }";
stateTable["s20"] := "{ expr -> expr (*) MINUS prod: {MINUS, PLUS, SEMICOLON, }, expr -> expr (*) PLUS prod: {MINUS, PLUS, SEMICOLON, }, expr_part -> expr (*) SEMICOLON: {\$, INTEGER, LPAREN, },  }";
stateTable["s21"] := "{ expr -> expr MINUS prod (*): {MINUS, PLUS, RPAREN, }, prod -> prod (*) DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod (*) MOD fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod (*) TIMES fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, },  }";
stateTable["s22"] := "{ expr -> expr MINUS prod (*): {MINUS, PLUS, SEMICOLON, }, prod -> prod (*) DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod (*) MOD fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod (*) TIMES fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s23"] := "{ expr -> expr PLUS prod (*): {MINUS, PLUS, RPAREN, }, prod -> prod (*) DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod (*) MOD fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod (*) TIMES fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, },  }";
stateTable["s24"] := "{ expr -> expr PLUS prod (*): {MINUS, PLUS, SEMICOLON, }, prod -> prod (*) DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod (*) MOD fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod (*) TIMES fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s25"] := "{ expr_part -> expr SEMICOLON (*): {\$, INTEGER, LPAREN, } }";
stateTable["s26"] := "{ expr_list -> expr_list expr_part (*): {\$, INTEGER, LPAREN, } }";
stateTable["s27"] := "{ expr_list -> expr_part (*): {\$, INTEGER, LPAREN, } }";
stateTable["s28"] := "{ prod -> fact (*): {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, } }";
stateTable["s29"] := "{ prod -> fact (*): {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, } }";
stateTable["s30"] := "{ S -> grammar (*): {\$} }";
stateTable["s31"] := "{ expr -> prod (*): {MINUS, PLUS, RPAREN, }, prod -> prod (*) DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod (*) MOD fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, }, prod -> prod (*) TIMES fact: {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, },  }";
stateTable["s32"] := "{ expr -> prod (*): {MINUS, PLUS, SEMICOLON, }, prod -> prod (*) DIVIDE fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod (*) MOD fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, }, prod -> prod (*) TIMES fact: {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, },  }";
stateTable["s33"] := "{ prod -> prod DIVIDE fact (*): {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, } }";
stateTable["s34"] := "{ prod -> prod DIVIDE fact (*): {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, } }";
stateTable["s35"] := "{ prod -> prod MOD fact (*): {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, } }";
stateTable["s36"] := "{ prod -> prod MOD fact (*): {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, } }";
stateTable["s37"] := "{ prod -> prod TIMES fact (*): {DIVIDE, MINUS, MOD, PLUS, RPAREN, TIMES, } }";
stateTable["s38"] := "{ prod -> prod TIMES fact (*): {DIVIDE, MINUS, MOD, PLUS, SEMICOLON, TIMES, } }";

actionTable := {};
actionTable["s0", "INTEGER"] := Shift("s14");
actionTable["s0", "LPAREN"] := Shift("s0");

actionTable["s1", "INTEGER"] := Shift("s14");
actionTable["s1", "LPAREN"] := Shift("s0");

actionTable["s2", "INTEGER"] := Shift("s14");
actionTable["s2", "LPAREN"] := Shift("s0");

actionTable["s3", "INTEGER"] := Shift("s14");
actionTable["s3", "LPAREN"] := Shift("s0");

actionTable["s4", "INTEGER"] := Shift("s14");
actionTable["s4", "LPAREN"] := Shift("s0");

actionTable["s5", "INTEGER"] := Shift("s14");
actionTable["s5", "LPAREN"] := Shift("s0");

actionTable["s6", "INTEGER"] := Shift("s14");
actionTable["s6", "LPAREN"] := Shift("s0");

actionTable["s7", "INTEGER"] := Shift("s15");
actionTable["s7", "LPAREN"] := Shift("s1");

actionTable["s8", "INTEGER"] := Shift("s15");
actionTable["s8", "LPAREN"] := Shift("s1");
actionTable["s8", '$'] := Reduce("r0");

actionTable["s9", "INTEGER"] := Shift("s15");
actionTable["s9", "LPAREN"] := Shift("s1");

actionTable["s10", "INTEGER"] := Shift("s15");
actionTable["s10", "LPAREN"] := Shift("s1");

actionTable["s11", "INTEGER"] := Shift("s15");
actionTable["s11", "LPAREN"] := Shift("s1");

actionTable["s12", "INTEGER"] := Shift("s15");
actionTable["s12", "LPAREN"] := Shift("s1");

actionTable["s13", "INTEGER"] := Shift("s15");
actionTable["s13", "LPAREN"] := Shift("s1");

actionTable["s14", "DIVIDE"] := Reduce("r12");
actionTable["s14", "MINUS"] := Reduce("r12");
actionTable["s14", "MOD"] := Reduce("r12");
actionTable["s14", "PLUS"] := Reduce("r12");
actionTable["s14", "RPAREN"] := Reduce("r12");
actionTable["s14", "TIMES"] := Reduce("r12");

actionTable["s15", "DIVIDE"] := Reduce("r12");
actionTable["s15", "MINUS"] := Reduce("r12");
actionTable["s15", "MOD"] := Reduce("r12");
actionTable["s15", "PLUS"] := Reduce("r12");
actionTable["s15", "SEMICOLON"] := Reduce("r12");
actionTable["s15", "TIMES"] := Reduce("r12");

actionTable["s16", "MINUS"] := Shift("s2");
actionTable["s16", "PLUS"] := Shift("s3");
actionTable["s16", "RPAREN"] := Shift("s18");

actionTable["s17", "MINUS"] := Shift("s2");
actionTable["s17", "PLUS"] := Shift("s3");
actionTable["s17", "RPAREN"] := Shift("s19");

actionTable["s18", "DIVIDE"] := Reduce("r11");
actionTable["s18", "MINUS"] := Reduce("r11");
actionTable["s18", "MOD"] := Reduce("r11");
actionTable["s18", "PLUS"] := Reduce("r11");
actionTable["s18", "RPAREN"] := Reduce("r11");
actionTable["s18", "TIMES"] := Reduce("r11");

actionTable["s19", "DIVIDE"] := Reduce("r11");
actionTable["s19", "MINUS"] := Reduce("r11");
actionTable["s19", "MOD"] := Reduce("r11");
actionTable["s19", "PLUS"] := Reduce("r11");
actionTable["s19", "SEMICOLON"] := Reduce("r11");
actionTable["s19", "TIMES"] := Reduce("r11");

actionTable["s20", "MINUS"] := Shift("s9");
actionTable["s20", "PLUS"] := Shift("s10");
actionTable["s20", "SEMICOLON"] := Shift("s25");

actionTable["s21", "DIVIDE"] := Shift("s4");
actionTable["s21", "MOD"] := Shift("s5");
actionTable["s21", "TIMES"] := Shift("s6");
actionTable["s21", "MINUS"] := Reduce("r5");
actionTable["s21", "PLUS"] := Reduce("r5");
actionTable["s21", "RPAREN"] := Reduce("r5");

actionTable["s22", "DIVIDE"] := Shift("s11");
actionTable["s22", "MOD"] := Shift("s12");
actionTable["s22", "TIMES"] := Shift("s13");
actionTable["s22", "MINUS"] := Reduce("r5");
actionTable["s22", "PLUS"] := Reduce("r5");
actionTable["s22", "SEMICOLON"] := Reduce("r5");

actionTable["s23", "DIVIDE"] := Shift("s4");
actionTable["s23", "MOD"] := Shift("s5");
actionTable["s23", "TIMES"] := Shift("s6");
actionTable["s23", "MINUS"] := Reduce("r4");
actionTable["s23", "PLUS"] := Reduce("r4");
actionTable["s23", "RPAREN"] := Reduce("r4");

actionTable["s24", "DIVIDE"] := Shift("s11");
actionTable["s24", "MOD"] := Shift("s12");
actionTable["s24", "TIMES"] := Shift("s13");
actionTable["s24", "MINUS"] := Reduce("r4");
actionTable["s24", "PLUS"] := Reduce("r4");
actionTable["s24", "SEMICOLON"] := Reduce("r4");

actionTable["s25", '$'] := Reduce("r3");
actionTable["s25", "INTEGER"] := Reduce("r3");
actionTable["s25", "LPAREN"] := Reduce("r3");

actionTable["s26", '$'] := Reduce("r1");
actionTable["s26", "INTEGER"] := Reduce("r1");
actionTable["s26", "LPAREN"] := Reduce("r1");

actionTable["s27", '$'] := Reduce("r2");
actionTable["s27", "INTEGER"] := Reduce("r2");
actionTable["s27", "LPAREN"] := Reduce("r2");

actionTable["s28", "DIVIDE"] := Reduce("r10");
actionTable["s28", "MINUS"] := Reduce("r10");
actionTable["s28", "MOD"] := Reduce("r10");
actionTable["s28", "PLUS"] := Reduce("r10");
actionTable["s28", "RPAREN"] := Reduce("r10");
actionTable["s28", "TIMES"] := Reduce("r10");

actionTable["s29", "DIVIDE"] := Reduce("r10");
actionTable["s29", "MINUS"] := Reduce("r10");
actionTable["s29", "MOD"] := Reduce("r10");
actionTable["s29", "PLUS"] := Reduce("r10");
actionTable["s29", "SEMICOLON"] := Reduce("r10");
actionTable["s29", "TIMES"] := Reduce("r10");

actionTable["s30", '$'] := Accept();

actionTable["s31", "DIVIDE"] := Shift("s4");
actionTable["s31", "MOD"] := Shift("s5");
actionTable["s31", "TIMES"] := Shift("s6");
actionTable["s31", "MINUS"] := Reduce("r6");
actionTable["s31", "PLUS"] := Reduce("r6");
actionTable["s31", "RPAREN"] := Reduce("r6");

actionTable["s32", "DIVIDE"] := Shift("s11");
actionTable["s32", "MOD"] := Shift("s12");
actionTable["s32", "TIMES"] := Shift("s13");
actionTable["s32", "MINUS"] := Reduce("r6");
actionTable["s32", "PLUS"] := Reduce("r6");
actionTable["s32", "SEMICOLON"] := Reduce("r6");

actionTable["s33", "DIVIDE"] := Reduce("r8");
actionTable["s33", "MINUS"] := Reduce("r8");
actionTable["s33", "MOD"] := Reduce("r8");
actionTable["s33", "PLUS"] := Reduce("r8");
actionTable["s33", "RPAREN"] := Reduce("r8");
actionTable["s33", "TIMES"] := Reduce("r8");

actionTable["s34", "DIVIDE"] := Reduce("r8");
actionTable["s34", "MINUS"] := Reduce("r8");
actionTable["s34", "MOD"] := Reduce("r8");
actionTable["s34", "PLUS"] := Reduce("r8");
actionTable["s34", "SEMICOLON"] := Reduce("r8");
actionTable["s34", "TIMES"] := Reduce("r8");

actionTable["s35", "DIVIDE"] := Reduce("r9");
actionTable["s35", "MINUS"] := Reduce("r9");
actionTable["s35", "MOD"] := Reduce("r9");
actionTable["s35", "PLUS"] := Reduce("r9");
actionTable["s35", "RPAREN"] := Reduce("r9");
actionTable["s35", "TIMES"] := Reduce("r9");

actionTable["s36", "DIVIDE"] := Reduce("r9");
actionTable["s36", "MINUS"] := Reduce("r9");
actionTable["s36", "MOD"] := Reduce("r9");
actionTable["s36", "PLUS"] := Reduce("r9");
actionTable["s36", "SEMICOLON"] := Reduce("r9");
actionTable["s36", "TIMES"] := Reduce("r9");

actionTable["s37", "DIVIDE"] := Reduce("r7");
actionTable["s37", "MINUS"] := Reduce("r7");
actionTable["s37", "MOD"] := Reduce("r7");
actionTable["s37", "PLUS"] := Reduce("r7");
actionTable["s37", "RPAREN"] := Reduce("r7");
actionTable["s37", "TIMES"] := Reduce("r7");

actionTable["s38", "DIVIDE"] := Reduce("r7");
actionTable["s38", "MINUS"] := Reduce("r7");
actionTable["s38", "MOD"] := Reduce("r7");
actionTable["s38", "PLUS"] := Reduce("r7");
actionTable["s38", "SEMICOLON"] := Reduce("r7");
actionTable["s38", "TIMES"] := Reduce("r7");

gotoTable := {};
gotoTable["s0", "expr"] := "s16";
gotoTable["s0", "fact"] := "s28";
gotoTable["s0", "prod"] := "s31";
gotoTable["s1", "expr"] := "s17";
gotoTable["s1", "fact"] := "s28";
gotoTable["s1", "prod"] := "s31";
gotoTable["s2", "fact"] := "s28";
gotoTable["s2", "prod"] := "s21";
gotoTable["s3", "fact"] := "s28";
gotoTable["s3", "prod"] := "s23";
gotoTable["s4", "fact"] := "s33";
gotoTable["s5", "fact"] := "s35";
gotoTable["s6", "fact"] := "s37";
gotoTable["s7", "expr"] := "s20";
gotoTable["s7", "expr_list"] := "s8";
gotoTable["s7", "expr_part"] := "s27";
gotoTable["s7", "fact"] := "s29";
gotoTable["s7", "grammar"] := "s30";
gotoTable["s7", "prod"] := "s32";
gotoTable["s8", "expr"] := "s20";
gotoTable["s8", "expr_part"] := "s26";
gotoTable["s8", "fact"] := "s29";
gotoTable["s8", "prod"] := "s32";
gotoTable["s9", "fact"] := "s29";
gotoTable["s9", "prod"] := "s22";
gotoTable["s10", "fact"] := "s29";
gotoTable["s10", "prod"] := "s24";
gotoTable["s11", "fact"] := "s34";
gotoTable["s12", "fact"] := "s36";
gotoTable["s13", "fact"] := "s38";
