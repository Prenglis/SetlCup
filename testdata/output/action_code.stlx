function_name := 'factorial';
id := 'n';
 result := [id] ; 
param_list := result;
id_2 := 'n';
 result := Variable(id_2); 
f := result;
 result := f;     
p := result;
 result := p;     
n := '0';
 result := Integer(n);   
f := result;
 result := f;     
p := result;
 result := p;     
 result := Equation(lhs,rhs); 
b := result;
n := '1';
 result := Integer(n);   
f := result;
 result := f;     
p := result;
 result := p;     
e := result;
 result := Return(e); 
s := result;
 result := []; 
sl := result;
 result := [s] + sl ; 
st_list1 := result;
 result := If(b, st_list1); 
s := result;
id_2 := 'n';
 result := Variable(id_2); 
f := result;
 result := f;     
p := result;
id_1 := 'factorial';
id_2 := 'n';
 result := Variable(id_2); 
f := result;
 result := f;     
p := result;
 result := p;     
e := result;
n := '1';
 result := Integer(n);   
f := result;
 result := f;     
p := result;
 result := Difference(e,p); 
e := result;
 result := [e]; 
el := result;
 result := FunctionCall(id_1,el); 
f := result;
 result := Product(p,f); 
p := result;
 result := p;     
e := result;
 result := Return(e); 
s := result;
 result := []; 
sl := result;
 result := [s] + sl ; 
sl := result;
 result := [s] + sl ; 
statement_list := result;
 result := Function(function_name, param_list, statement_list);
d := result;
string := 'Berechnung der Fakultät für i = 1 bis 9';
 result := PrintString(string); 
p := result;
 result := [p]; 
printexpr_list := result;
 result := Print(printexpr_list); 
stmts := result;
id := 'i';
n := '0';
 result := Integer(n);   
f := result;
 result := f;     
p := result;
 result := p;     
e := result;
 result := Assign(id, e); 
i_a := result;
id_2 := 'i';
 result := Variable(id_2); 
f := result;
 result := f;     
p := result;
 result := p;     
n := '10';
 result := Integer(n);   
f := result;
 result := f;     
p := result;
 result := p;     
 result := LessThan(lhs,rhs); 
b := result;
id := 'i';
id_2 := 'i';
 result := Variable(id_2); 
f := result;
 result := f;     
p := result;
 result := p;     
e := result;
n := '1';
 result := Integer(n);   
f := result;
 result := f;     
p := result;
 result := Sum(e,p); 
e := result;
 result := Assign(id, e); 
e_a := result;
id_2 := 'i';
 result := Variable(id_2); 
f := result;
 result := f;     
p := result;
 result := p;     
e := result;
 result := Expr(e); 
p := result;
string := '! = ';
 result := PrintString(string); 
p := result;
id_1 := 'factorial';
id_2 := 'i';
 result := Variable(id_2); 
f := result;
 result := f;     
p := result;
 result := p;     
e := result;
 result := [e]; 
el := result;
 result := FunctionCall(id_1,el); 
f := result;
 result := f;     
p := result;
 result := p;     
e := result;
 result := Expr(e); 
p := result;
 result := [p]; 
np := result;
 result := [p] + np ; 
np := result;
 result := [p] + np ; 
printexpr_list := result;
 result := Print(printexpr_list); 
s := result;
 result := []; 
sl := result;
 result := [s] + sl ; 
st_list3 := result;
 result := For(i_a, b, e_a, st_list3);  
stmts := result;
 result := []; 
printexpr_list := result;
 result := Print(printexpr_list); 
stmts := result;
 result := []; 
dsl := result;
 result := [stms] + dsl; 
dsl := result;
 result := [stms] + dsl; 
dsl := result;
 result := [stms] + dsl; 
dl := result;
result := [d] + dl; 
d := result;
 Result := Program(d); 
