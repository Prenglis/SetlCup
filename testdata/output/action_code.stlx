a := [];
b := [];
be_par := [];
c := [];
d := [];
dl := [];
dsl := [];
e := [];
e_a := [];
e_par := [];
el := [];
f := [];
function_name := [];
i_a := [];
id := [];
id_1 := [];
id_2 := [];
lhs := [];
n := [];
nid := [];
np := [];
p := [];
param_list := [];
printexpr_list := [];
rhs := [];
s := [];
sl := [];
st_list1 := [];
st_list2 := [];
st_list3 := [];
statement_list := [];
stmts := [];
string := [];
function_name += ['factorial'];
id += ['n'];
t_id := id;
id := id[-1];
 result := [id] ; 
id := t_id[..-2];
param_list += [result];
id_2 += ['n'];
t_id_2 := id_2;
id_2 := id_2[-1];
 result := Variable(id_2); 
id_2 := t_id_2[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
lhs += [result];
n += ['0'];
t_n := n;
n := n[-1];
 result := Integer(eval(n));   
n := t_n[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
rhs += [result];
t_lhs := lhs;
lhs := lhs[-1];
t_rhs := rhs;
rhs := rhs[-1];
 result := Equation(lhs,rhs); 
lhs := t_lhs[..-2];
rhs := t_rhs[..-2];
b += [result];
n += ['1'];
t_n := n;
n := n[-1];
 result := Integer(eval(n));   
n := t_n[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
 result := Return(e); 
e := t_e[..-2];
s += [result];
 result := []; 
sl += [result];
t_s := s;
s := s[-1];
t_sl := sl;
sl := sl[-1];
 result := [s] + sl ; 
s := t_s[..-2];
sl := t_sl[..-2];
st_list1 += [result];
t_b := b;
b := b[-1];
t_st_list1 := st_list1;
st_list1 := st_list1[-1];
 result := If(b, st_list1); 
b := t_b[..-2];
st_list1 := t_st_list1[..-2];
s += [result];
id_2 += ['n'];
t_id_2 := id_2;
id_2 := id_2[-1];
 result := Variable(id_2); 
id_2 := t_id_2[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
id_1 += ['factorial'];
id_2 += ['n'];
t_id_2 := id_2;
id_2 := id_2[-1];
 result := Variable(id_2); 
id_2 := t_id_2[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
n += ['1'];
t_n := n;
n := n[-1];
 result := Integer(eval(n));   
n := t_n[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_e := e;
e := e[-1];
t_p := p;
p := p[-1];
 result := Difference(e,p); 
e := t_e[..-2];
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
 result := [e]; 
e := t_e[..-2];
el += [result];
t_el := el;
el := el[-1];
t_id_1 := id_1;
id_1 := id_1[-1];
 result := FunctionCall(id_1,el); 
el := t_el[..-2];
id_1 := t_id_1[..-2];
f += [result];
t_f := f;
f := f[-1];
t_p := p;
p := p[-1];
 result := Product(p,f); 
f := t_f[..-2];
p := t_p[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
 result := Return(e); 
e := t_e[..-2];
s += [result];
 result := []; 
sl += [result];
t_s := s;
s := s[-1];
t_sl := sl;
sl := sl[-1];
 result := [s] + sl ; 
s := t_s[..-2];
sl := t_sl[..-2];
sl += [result];
t_s := s;
s := s[-1];
t_sl := sl;
sl := sl[-1];
 result := [s] + sl ; 
s := t_s[..-2];
sl := t_sl[..-2];
statement_list += [result];
t_function_name := function_name;
function_name := function_name[-1];
t_param_list := param_list;
param_list := param_list[-1];
t_statement_list := statement_list;
statement_list := statement_list[-1];
 result := Function(function_name, param_list, statement_list);
function_name := t_function_name[..-2];
param_list := t_param_list[..-2];
statement_list := t_statement_list[..-2];
d += [result];
string += ['Berechnung der Fakultät für i = 1 bis 9'];
t_string := string;
string := string[-1];
 result := PrintString(string); 
string := t_string[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := [p]; 
p := t_p[..-2];
printexpr_list += [result];
t_printexpr_list := printexpr_list;
printexpr_list := printexpr_list[-1];
 result := Print(printexpr_list); 
printexpr_list := t_printexpr_list[..-2];
stmts += [result];
id += ['i'];
n += ['0'];
t_n := n;
n := n[-1];
 result := Integer(eval(n));   
n := t_n[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
t_id := id;
id := id[-1];
 result := Assign(id, e); 
e := t_e[..-2];
id := t_id[..-2];
i_a += [result];
id_2 += ['i'];
t_id_2 := id_2;
id_2 := id_2[-1];
 result := Variable(id_2); 
id_2 := t_id_2[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
lhs += [result];
n += ['10'];
t_n := n;
n := n[-1];
 result := Integer(eval(n));   
n := t_n[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
rhs += [result];
t_lhs := lhs;
lhs := lhs[-1];
t_rhs := rhs;
rhs := rhs[-1];
 result := LessThan(lhs,rhs); 
lhs := t_lhs[..-2];
rhs := t_rhs[..-2];
b += [result];
id += ['i'];
id_2 += ['i'];
t_id_2 := id_2;
id_2 := id_2[-1];
 result := Variable(id_2); 
id_2 := t_id_2[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
n += ['1'];
t_n := n;
n := n[-1];
 result := Integer(eval(n));   
n := t_n[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_e := e;
e := e[-1];
t_p := p;
p := p[-1];
 result := Sum(e,p); 
e := t_e[..-2];
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
t_id := id;
id := id[-1];
 result := Assign(id, e); 
e := t_e[..-2];
id := t_id[..-2];
e_a += [result];
id_2 += ['i'];
t_id_2 := id_2;
id_2 := id_2[-1];
 result := Variable(id_2); 
id_2 := t_id_2[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
 result := Expr(e); 
e := t_e[..-2];
p += [result];
string += ['! = '];
t_string := string;
string := string[-1];
 result := PrintString(string); 
string := t_string[..-2];
p += [result];
id_1 += ['factorial'];
id_2 += ['i'];
t_id_2 := id_2;
id_2 := id_2[-1];
 result := Variable(id_2); 
id_2 := t_id_2[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
 result := [e]; 
e := t_e[..-2];
el += [result];
t_el := el;
el := el[-1];
t_id_1 := id_1;
id_1 := id_1[-1];
 result := FunctionCall(id_1,el); 
el := t_el[..-2];
id_1 := t_id_1[..-2];
f += [result];
t_f := f;
f := f[-1];
 result := f;     
f := t_f[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := p;     
p := t_p[..-2];
e += [result];
t_e := e;
e := e[-1];
 result := Expr(e); 
e := t_e[..-2];
p += [result];
t_p := p;
p := p[-1];
 result := [p]; 
p := t_p[..-2];
np += [result];
t_np := np;
np := np[-1];
t_p := p;
p := p[-1];
 result := [p] + np ; 
np := t_np[..-2];
p := t_p[..-2];
np += [result];
t_np := np;
np := np[-1];
t_p := p;
p := p[-1];
 result := [p] + np ; 
np := t_np[..-2];
p := t_p[..-2];
printexpr_list += [result];
t_printexpr_list := printexpr_list;
printexpr_list := printexpr_list[-1];
 result := Print(printexpr_list); 
printexpr_list := t_printexpr_list[..-2];
s += [result];
 result := []; 
sl += [result];
t_s := s;
s := s[-1];
t_sl := sl;
sl := sl[-1];
 result := [s] + sl ; 
s := t_s[..-2];
sl := t_sl[..-2];
st_list3 += [result];
t_b := b;
b := b[-1];
t_e_a := e_a;
e_a := e_a[-1];
t_i_a := i_a;
i_a := i_a[-1];
t_st_list3 := st_list3;
st_list3 := st_list3[-1];
 result := For(i_a, b, e_a, st_list3);  
b := t_b[..-2];
e_a := t_e_a[..-2];
i_a := t_i_a[..-2];
st_list3 := t_st_list3[..-2];
stmts += [result];
 result := []; 
printexpr_list += [result];
t_printexpr_list := printexpr_list;
printexpr_list := printexpr_list[-1];
 result := Print(printexpr_list); 
printexpr_list := t_printexpr_list[..-2];
stmts += [result];
 result := []; 
dsl += [result];
t_dsl := dsl;
dsl := dsl[-1];
t_stmts := stmts;
stmts := stmts[-1];
 result := [stmts] + dsl; 
dsl := t_dsl[..-2];
stmts := t_stmts[..-2];
dsl += [result];
t_dsl := dsl;
dsl := dsl[-1];
t_stmts := stmts;
stmts := stmts[-1];
 result := [stmts] + dsl; 
dsl := t_dsl[..-2];
stmts := t_stmts[..-2];
dsl += [result];
t_dsl := dsl;
dsl := dsl[-1];
t_stmts := stmts;
stmts := stmts[-1];
 result := [stmts] + dsl; 
dsl := t_dsl[..-2];
stmts := t_stmts[..-2];
dl += [result];
t_d := d;
d := d[-1];
t_dl := dl;
dl := dl[-1];
 result := [d] + dl; 
d := t_d[..-2];
dl := t_dl[..-2];
d += [result];
t_d := d;
d := d[-1];
 result := Program(d); 
d := t_d[..-2];
