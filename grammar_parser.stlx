// Read a grammar from the file f, parse the grammar, and return it.
readGrammar := procedure(f) {
    gs := join(readFile(f), "\n");
    tl := tokenizeString(gs);
    return parseGrammar(tl);
};
readGrammarFromTokenList := procedure(token_list, silent_mode){
    return parseGrammar(token_list);
};
readGrammarFromString := procedure(grammar_string, silent_mode){
    tl := tokenizeString(grammar_string, silent_mode);
    return parseGrammar(tl);
};
// This procedure takes a token list tl and tries to interpret this list
parseGrammar := procedure(tl) {
    [rule, rl] := parseRule(tl);
    ruleList := [ rule ];
    while (#rl >= 1) {
        [rule, rl] := parseRule(rl);
        ruleList += [ rule ];
    }
    return collectSimpleRules(ruleList);
};

collectSimpleRules := procedure(ruleList) {
    rules     := [];
    variables := {};
    for ([v, bodyList] in ruleList) {
        variables += { v };
        for (body in bodyList) {
            rules += [ [v, body[..-2], body[-1]] ];
        }
    }
    start := rules[1][1];
    return [rules, variables, start];
};

parseRule := procedure(tl) {
    [head, rl] := [tl[1], tl[2..]];
    assert(fct(tl[1]) == "Var", "parseRule($tl$)");
    assert(rl[1] == "::=", "parseRule($tl$)");
    [body, rl] := parseBody(rl[2..]);
    bodyList := [ body ];
    while (#rl >= 1 && rl[1] == "|") {
        [body, rl] := parseBody(rl[2..]);     
        bodyList += [ body ];
    }
    assert(rl[1] == ";", "parseRule($tl$), rl = $rl$");
    return [ [head, bodyList], rl[2..]];
};

parseBody := procedure(tl) {
    itemList := [];
    while (#tl >= 1 && !(tl[1] in [ "|", ";" ])) {
        [item, tl] := parseItem(tl);
        itemList += [ item ];
    }
    match(itemList[-1])
    {
        case UserCode(u):

        default:
        itemList += [ UserCode('') ];
    }
    return [itemList, tl];
};

parseItem := procedure(tl) {
    match (tl) {
        case [ Var(var_name, var_id) | rl] : return [ Var(var_name, var_id),     rl];
        case [ Token(token_name, token_id) | rl] : return [ Token(token_name, token_id),   rl];
        case [ UserCode(u) | rl]: return [UserCode(u), rl];
        default : abort("parse error in parseItem($tl$)");
    }
};


grammar2String := procedure(ruleList) {
    result := "";
    for ([v, bl] in ruleList) {
        bh := bl[1]; br := bl[2..];
        result += v + ":\n      " + itemList2String(bh) + "\n";
        result += bodyList2String(br);
    }
    return result;
};

bodyList2String := procedure(l) {    
    match (l) {
        case []: 
             return "    ;\n\n";
        case [bh| bl]: 
             return "    | " + itemList2String(bh) + "\n" + bodyList2String(bl);
    }
};

itemList2String := procedure(l) {
    match (l) {
        case []: 
             return "";
        case [x]: 
             return item2String(x);
        case [h | t]: 
             return item2String(h) + " " + itemList2String(t);
    }
};

item2String := procedure(i) {
    match (i) {
        case Var(var_name, var_id):   
            if(var_id != "")
                {
                    return var_name + ":" + var_id;
                }
            else
            {
                return var_name;
            }
        case Token(token_name, token_id): 
            if(token_id != "")
                {
                    return token_name + ":" + token_id;
                }
            else
            {
                return token_name;
            }
        case UserCode(u): return "{: " + u + " :}";
        default:       abort("item2String($i$)");
    }
};

testParser := procedure(f) {
    for ([v, il] in readGrammar(f)[1]) {
        if(!silent_mode)
        {
         print("$v$ -> $itemList2String(il)$");
        }
    }
};




/* Combine a list of grammar symbols, i.e. of variables and tokens into a 
   string.
 */
list2str := procedure(l) {
    result := "";
    for (x in l) {
        match (x) {
            case Var(var_name, var_id): 
                if(var_id != "") 
                {
                    result += " " + var_name + ":" + var_id;
                }
                else
                {
                     result += " " + var_name;
                }
            case Token(token_name, token_id) : 
                if(token_id != "") 
                {
                    result += " " + token_name + ":" + token_id;
                }
                else
                {
                     result += " " + token_name;
                }
            case UserCode(u): result += "{: " + u + " :}";
            default: if(!silent_mode){print("Error, $x$ can not be parsed");}
        }
    }
    return result;
};

escapeDollar := procedure(t) {
    if (t == '$') { 
        return '\$'; 
    }
    return t; 
};

escapeDollar2 := procedure(t) {
    match(t)
    {
        case Token(n, id):
            return t;
        default:
            if(t == '$')
            {
                    return Token(@"$", "");
            }
            else
            {
                 return Token(t, ""); 
            }
    }
};

/* The objects of this class represent extended marked rules of the form
   variable -> alpha * beta : L user_code.
*/
class markedRule(variable, alpha, beta, followSet, user_code) {
    this.mVariable  := variable;
    this.mAlpha     := alpha;
    this.mBeta      := beta;
    this.mFollowSet := followSet;
    this.mUser_Code := user_code;
    // check whether the * is at the end of of the rule
    isComplete := procedure() { return mBeta == []; };
    nextVar    := procedure() {
        if (#mBeta > 0) {
            match (mBeta[1]) {
                case Var(var_name, var_id): return Var(var_name, "");
            }
        }
    };
    symbolAfterDot := procedure() {
        if (#mBeta > 0) { return mBeta[1]; }
    };
    restAfterVariable := procedure() {
        if (#mBeta > 1) { return mBeta[2..]; }
        return [];
    };
    moveDot := procedure() {
        return markedRule(mVariable, mAlpha + [mBeta[1]], mBeta[2..], mFollowSet, mUser_Code);
    };  
    // turn a marked rule into a grammar rule
    toRule := procedure() {
        return grammarRule(mVariable, mAlpha + mBeta, mUser_Code);
    };
    toParserRule := procedure(){
        [rargs, user_code ] := extractArgList(mAlpha + mBeta);
        if(this.mUser_Code == om)
        {
            this.mUser_Code := UserCode('');
        }
        return Rule(mVariable, rargs, this.mUser_Code);
    };
    escapeDollarFollowSet := procedure(followSet)
    {
        newSet := {};
        for (t in followSet) {
            newSet += {escapeDollar(t)};
        }
        return newSet;
    };
    f_str := procedure() {
        rule := "markedRule($mVariable$,$mAlpha$,$mBeta$,$escapeDollarFollowSet(mFollowSet)$,$mUser_Code$)";
        // rule :=  "$mVariable$";
        // rule += " ->" ;
        // rule += list2str(mAlpha) + " (*)";
        // rule +=  list2str(mBeta) + ": {";
        // n := 1;
        // for (t in mFollowSet) {
            // rule += escapeDollar(t);
            // if (n < #mFollowSet) {
                // rule += ", ";
            // }
        // }
        // rule += "}";
        return rule;
    };

  static {
    // take a core rule and attach a follow set
    createRule := procedure(cr, followSet) {
        return markedRule(cr.mVariable, cr.mAlpha, cr.mBeta, followSet, cr.user_code);
    };  
  }
}

// A coreRule is a markedRule without a follow set.
class coreRule(mr) {
    this.mVariable  := mr.mVariable;
    this.mAlpha     := mr.mAlpha;
    this.mBeta      := mr.mBeta;
    this.mUser_Code := mr.mUser_Code;

    static {
        equals := procedure(that) {
            return this.mVariable == that.mVariable &&
                   this.mAlpha    == that.mAlpha    &&
                   this.mBeta     == that.mBeta     &&
                   this.mUser_Code == that.mUser_Code;
        };
    }
}


/* This class represents a grammar rule. */
class grammarRule(variable, gamma, user_code) {
    this.mVariable := variable;
    this.mGamma    := gamma;
    this.mUser_Code := user_code;
    f_str := procedure() {
        return "grammarRule($mVariable$, $mGamma$, $mUser_Code$)";
        // return mVariable + " ->" + list2str(mGamma);
    };
}

// assign the empty set to all keys
initializeMap := procedure(keys) {
    return { [k, {}] : k in keys };
};

/* This class represents a context-free grammar */
class grammar(rules, variables, start, silent_mode) {
    this.mRules       := rules;
    this.mVariables   := variables;
    this.mStart       := start;
    this.mRules       += { [Var("S",""), [mStart], UserCode('')] }; // augment grammar
    this.mVariables   += { Var("S", "") };
    this.mFirst       := initializeMap(mVariables);
    this.mFollow      := initializeMap(mVariables);
    this.mTokens      := {};
    this.mStates      := {};
    this.mStateNames  := {};
    this.mRuleNames   := {};
    this.mConflicts   := false;
    this.mRulesMap := {};
    this.mGotoTable := {};
    this.mStateTable := {};
    this.mActionTable := {};
    this.mSilentMode := silent_mode;

  static {
    assignRuleNames := procedure() {
        counter := 0;
        if(!mSilentMode)
        {
            print("rulesMap := {};");
        }
        // writeFile("Parser.stlx" , "");
        // appendFile("Parser.stlx", ["actionTable := gotoTable := stateTable := rulesMap := {};"]);
        // appendFile("Parser.stlx", ["rulesMap := {};"]);
        for ([head, body, user_code] in mRules) {
        [rargs, _] := extractArgList(body);
        execute("user_code := UserCode('$args(user_code)[1]$');");
        rule                  := Rule(head, rargs, user_code);
            ruleName              := "r" + counter;
            this.mRuleNames[rule] := ruleName;
            if(!mSilentMode)
             {
                print("$ruleName$ := $rule$;");
                print("rulesMap[\"$ruleName$\"] := $rule$;");
            }
            // appendFile("Parser.stlx", ["$ruleName$ := $rule$;", "rulesMap[\"$ruleName$\"] := $rule$;"]);
             this.mRulesMap[ruleName] := rule;
            counter += 1;
        }
        // appendFile("Parser.stlx", ["$ruleNames$ := $mRuleNames$;"]);
        if(!mSilentMode)
        {
            print("\n");
        }
    };
    // check, whether this grammar is an LR-grammar  
    checkLR := procedure() {
        computeTokens();
        computeFirst();
        assignRuleNames();
        computeAllStates();
        computeActionTable();
        computeGotoTable();
        return [this.mRuleNames, this.mRulesMap, this.mStateTable, this.mActionTable, this.mGotoTable];
    };
    // collect all tokens  
    computeTokens := procedure() {
        for ([_, body, _] in mRules, x in body) {
            match (x) {
                case Token(token_name, token_id): this.mTokens += { x };
            }
        }
    };
    startRule := procedure() {
        return markedRule(Var("S", ""), [], [ mStart ], { '$' }, UserCode(""));
    };
    firstList := procedure(alpha) {
        match (alpha) {
             case []:               return { "" };
             case [ Var(var_name, var_id)   | r ]: return epsAppend(mFirst[Var(var_name, "")], firstList(r));
             case [ Token(token_name, token_id) | r ]: return { token_name };
        }
    };
    computeFirst := procedure() {
        change := true;
        while (change) {
            change := false;    

            for ([a, body, _] in mRules) {
                firstBody := firstList(body);
                if (!(firstBody <= mFirst[a])) { 
                    change := true;
                    this.mFirst[a] += firstBody;
                }
            }
        }
    };
    epsClosure := procedure(markedRules) {
        allRules := markedRules;
        newRules := markedRules;
        while (true) {
            moreRules := {};
            for (mr in newRules) {
                c := mr.nextVar();
                if (c == om) { continue; }
                for ([head, alpha, code_section] in mRules | c == head) {
                    followSet := epsAppend(firstList(mr.restAfterVariable()), mr.mFollowSet);
                    moreRules += { markedRule(head, [], alpha, followSet, code_section) };
                }
            }
            if (moreRules <= allRules) {
                
                return combineRules(allRules);
            }
            newRules := moreRules - allRules;
            allRules += newRules;
        }
    };
    // combine those marked rules in the given set that have the same core
    combineRules := procedure(markedRules) {
        cores   := { coreRule(mr) : mr in markedRules };
        combine := procedure(rules, cr) {
            return +/ { mr.mFollowSet : mr in rules | cr == coreRule(mr) };
        };
        combinedRules := { markedRule.createRule(cr, combine(markedRules, cr)) : cr in cores };
        return combinedRules;
    };
    goto := procedure(markedRules, x) {
        result := {};
        for (mr in markedRules) {
             tempSymbol := mr.symbolAfterDot();
             if(tempSymbol != om)
             {
                 if(fct(tempSymbol) == "Var" || fct(tempSymbol) == "TOKEN")
                 {
                    if(args(tempSymbol)[1] == args(x)[1])
                    {
                        result += { mr.moveDot() };
                    }
                }
                else
                {
                    if(tempSymbol == x)
                    {
                        result += { mr.moveDot() };
                    }
                }
            }
        }
        epsClosureResult := epsClosure(result);
        return epsClosureResult;
    };
    computeAllStates := procedure() {
        this.mStates := newStates := { epsClosure({ startRule() }) };
        while (true) {
            moreStates := {};
            for (ruleSet in newStates) {
                for (mr in ruleSet | !mr.isComplete()) {
                    x := mr.symbolAfterDot();
                    moreStates += { goto(ruleSet, x) };
                }
            }
            if (moreStates <= mStates) {
                break;
            }
            newStates := moreStates - mStates;
            this.mStates += newStates;
        }
        if(!mSilentMode)
        {   
            print("stateTable := {};"); 
        }
        this.mStateTable := {};
        counter := 0;
        for (state in mStates) {
            this.mStateNames[state] := "s" + counter;
            if(!mSilentMode)
            {   
                // print("stateTable[\"s$counter$\"] := $state2String(state)$;");
                 print("stateTable[\"s$counter$\"] := $state$;");
            }
            // appendFile("Parser.stlx", ["stateTable[\"s$counter$\"] := $state$;"]);
            this.mStateTable["s$counter$"] := state;
            
            counter += 1;
        }
        if(!mSilentMode)
        {   
             print("");
        }
       
    };
    state2String := procedure(state) {
        result := '"{ ';
        n := 1;
        for (mr in state) {
            result += mr;
            if (n < #state) {
                result += ", ";
            }
        }
        result += ' }"';
        return result;
    };
    computeActionTable := procedure() {
        if(!mSilentMode)
        {
            print("actionTable := {};");
        }
        for (state in mStates) {
            // compute shift actions
            for (token in mTokens) {
                stateName := mStateNames[state];
                newState  := goto(state, token);
                if (newState != {}) {
                    newName := mStateNames[newState];
                    t       := escapeDollar2(extractArg(token));
                    this.mActionTable[stateName, t] := Shift(newName);
                    if(!mSilentMode)
                    {
                        print("actionTable[\"$stateName$\", $t$] := $Shift(newName)$;");
                    }
                    // appendFile("Parser.stlx", ["actionTable[\"$stateName$\", $t$] := $Shift(newName)$;"]);
                }
            }
            // compute reduce actions
            for (mr in state | mr.isComplete()) {
                for (t in mr.mFollowSet) {
                    t := escapeDollar2(t);
                    parserRuleString := mr.toParserRule();
                    tRule := [x : x in domain(mRuleNames) | args(x)[1..2] == args(parserRuleString)[1..2]];
                    assert(#tRule == 1, "Only 1 Rule with same content");
                    tRule := arb(tRule);
                    ruleName := this.mRuleNames[tRule];
                    action1  := this.mActionTable[t];
                    action2 := Reduce(ruleName);
                    if (action1 == om) {
                        var_name := mStart;
                        if(args(parserRuleString)[..2] == [Var("S", ""), [var_name]])
                        {
                            action2 := Accept();
                        }
                        this.mActionTable[stateName, t] := action2;
                        if(!mSilentMode)
                        {
                            print("actionTable[\"$stateName$\", $t$] := $action2$;");
                        }
                        // appendFile("Parser.stlx", ["actionTable[\"$stateName$\", $t$] := $action2$;"]);
                    } else if (action1 != action2) {
                        this.mConflicts := true;
                        if(!mSilentMode)
                        {
                            print("//");
                            print("// conflict:");
                            print("// action[\"$stateName$\", $t$] := $action1$;");                        
                            print("// action[\"$stateName$\", $t$] := $action2$;");
                            print("//");
                        }
                    }
                }
            }
            if(!mSilentMode)
            
            {   
                print("");
            }
        }
    };
    computeGotoTable := procedure() {
        if(!mSilentMode)
        {
            print("gotoTable := {};");
        }
        for (state in mStates, var in mVariables) {
            newState := goto(state, var);
            if (newState != {}) {
                stateName := mStateNames[state];
                newName   := mStateNames[newState];
                if(!mSilentMode)
                {
                    print("gotoTable[\"$stateName$\", $var$] := \"$newName$\";");
                }
                // appendFile("Parser.stlx", ["gotoTable[\"$stateName$\", $var$] := \"$newName$\";"]);
                this.mGotoTable[stateName, var] := newName;
            }
        }
    };
    // auxilliary procedures
    f_str := procedure() {
        result := "grammar($mRules$, $mVariables$,$mStart$, $mSilentMode$)";
        // result := "";
        // for ([head, body] in mRules) {
        //     result += "$head$ ->";
        //     for (i in body) {
        //         result += " " + extractArg(i);
        //     }
        //     result += " ;\n";
        // }                  
        return result;
    };
    epsAppend := procedure(s, t) {
        if ("" in s) {
            if ("" in t) {
                return s + t;
            } 
            return s + t - { "" };
        }
        return s;
    };
  }  
}
    extractArgList := procedure(l) {
        args := [extractArg(t) : t in l];
        match(args[-1])
        {
            case UserCode(u):

            default:
             args[#args+1] := UserCode('');
        }
        return [args[..-2], args[-1]];
    };
    extractArg := procedure(x) {
        match (x) {
            case Var(var_name, var_id)   : 
                    return Var(var_name, var_id);
            case Token(token_name, token_id) :
                    return Token(token_name, token_id);
            case UserCode(u) : return UserCode(u);
        }
    };
escapeDollarActionTable := procedure(actionTable, silent_mode){
    newActionTable := {};
    for([state, symbol] in domain(actionTable))
    {

        action := actionTable[state, symbol];
        if(!silent_mode)
        {
            print("state, symbol, action := $[state, symbol, action]$");
        }
        match(symbol)
        {
            case Token(token_name, token_id):
                if(!silent_mode)
                {
                    print("token found : $Token(token_name, token_id)$");
                    print('token_name == ''$'' || token_name == ''\$'' || token_name == "\$" || token_name[-1] == ''$'' && #token_name <=2');
                    nPrint(token_name == '$');
                    nPrint(token_name == '\$');
                    nPrint(token_name == "\$");
                    nPrint(token_name[-1] == '$' && #token_name <=2);

                }
                if(token_name == '$' || token_name == '\$' || token_name == "\$" || token_name == @"$" || token_name == @'$' || token_name[-1] == '$' && #token_name <=2)
                {
                    if(!silent_mode)
                    {
                        print("\$ found");
                    }
                    token_name := @'$';
                }
                newActionTable[state, Token(token_name, token_id)] := action;
            case Var(var_name, var_id):
                if(!silent_mode)
                {
                    print("var found : $Var(var_name, var_id)$");
                }
                if(var_name == '$' || var_name == '\$' || var_name == "\$" || var_name == @"$" || var_name == @'$' || var_name[-1] == '$' && #var_name <=2)
                {
                    if(!silent_mode)
                    {
                        print("\$ found");
                    }
                    token_name := @'$';
                }
                newActionTable[state, Var(var_name, var_id)] := action;
        }
    }
    return newActionTable;
};
testFromTokenList := procedure(token_list, silent_mode)
 {
    [rules, variables, start] := parseGrammar(token_list);
    gr := grammar(rules, variables, start, silent_mode);

    // def_string := "getDefs := procedure(){ print(\"ruleNames\") };"
    [ruleNames, rulesMap, stateTable, actionTable, gotoTable] := gr.checkLR();
     def_string := "getDefs := procedure(){ \n";
     def_string += "ruleNames := $ruleNames$;\n";
     def_string += "rulesMap := $rulesMap$;\n";
     def_string += "stateTable := $stateTable$;\n";
     def_string += "actionTable := $escapeDollarActionTable(actionTable, silent_mode)$;\n";
     def_string += "gotoTable := $gotoTable$;\n";
     def_string += "return [ruleNames, rulesMap, stateTable, actionTable, gotoTable];\n";
     def_string += "};\n main();";
     appendFile("examplesGrammar.stlx", [def_string]);
    return [ruleNames, rulesMap, stateTable, actionTable, gotoTable];
 };
testFromString := procedure(grammar_string, silent_mode){
    [rules, variables, start] := readGrammarFromString(grammar_string, silent_mode);
    gr := grammar(rules, variables, start, silent_mode);
    [ruleNames, rulesMap, stateTable, actionTable, gotoTable] := gr.checkLR();
    return [ruleNames, rulesMap, stateTable, actionTable, gotoTable];

};
test := procedure(file) {
    [rules, variables, start] := readGrammar(file);
    gr := grammar(rules, variables, start);
    gr.checkLR();
};

main := closure() {
    if (params != []) {
        test(params[1]);
    } else {
        print("Call this program as follows: \"setlx lr-table-generator.stlx --params \'file\'");
        print("Here file should contain the grammar.");
    }
};
