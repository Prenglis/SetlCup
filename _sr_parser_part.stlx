/*
  Der Shift-Reduce-Parser ist in dieser Datei umgesetzt. 
  Er wird zusammen mit den benötigten Tabellen, sowie dem Scanner in eine neue Datei kopiert. 
  Die Klasse srParser wird die Eingabe parsen (mit shiften und reducen etc.).
  Außerdem wird beim Reduzieren der Action-Code durchgeführt
*/
class srParser(actiontable, gototable, statetable, rulesMap, silent_mode){
    scup_mActiontable := actiontable;
    scup_mGototable   := gototable;
    scup_mStatetable  := statetable;
    scup_mrulesMap := rulesMap;
    scup_mSilentMode := silent_mode;
    init_vars := procedure(){
         scup_action_code := [];
        //init scup_vars
        scup_marked_rules := +/range(scup_mStatetable);
        scup_rule_vars := {scup_mr.mAlpha : scup_mr in scup_marked_rules | scup_mr.mAlpha != []};
        scup_rule_vars := +/scup_rule_vars;
        scup_rule_vars := {  args(scup_rule_var)[2] : scup_rule_var in scup_rule_vars | args(scup_rule_var)[2] != ""};
        scup_action_code += ["result := [];"];
        for(scup_var_id in scup_rule_vars){
            scup_action_code += ["$scup_var_id$ := [];"];
        }
        scup_index   := 1;      // point to next token
        scup_symbols := [];     // stack of scup_symbols
        //find scup_startState
        scup_startState := {startState : startState in domain(scup_mStatetable) | 
            exists(firstState in scup_mStatetable[startState]| firstState.mVariable == Var("S", "") && firstState.mAlpha == [])};
        if(!scup_mSilentMode){
            print("#scup_startState : $#scup_startState$");
        }
        assert(#scup_startState == 1, "multiple scup_states contain S -> (*)");
        scup_startState := arb(scup_startState);
        if(!scup_mSilentMode){
            print("scup_startState : $scup_startState$");
        }
        scup_states  := [scup_startState];
        return [scup_action_code, scup_index, scup_symbols, scup_states, {}];
    };
    calculate_token_id:= procedure(scup_tl, scup_t, scup_q, scup_index){
        //tokens should have correct ID depending on current state
        //First: Calculate scup_token_ids which can be used in current State, and following scup_states
        //Second: Only try scup_states corresponding to scup_token_ids, where mBeta is not empty
        //third: If there are multiple scup_token_ids the one should be used, where the FollowSet contains the following token
        //Fourth: If there is no scup_token_id which fulfilles the stated rules, the one is taken where both the FollowSet is empty and the following tokens are empty
        scup_token_id := "";
        scup_action_tokens := { [args(scup_t_token)[2], scup_mStatetable[shiftState]] : 
            [scup_t_states, scup_t_token ] in domain(scup_mActiontable), 
            shiftState in scup_mActiontable[scup_t_states, scup_t_token] | 
            scup_t_states == scup_q && args(scup_t_token)[1] == scup_t && scup_mStatetable[shiftState] != om};
        if(!scup_mSilentMode){
            print("scup_t : $scup_t$");
            print("scup_action_tokens :$scup_action_tokens$");               
        }
        scup_action_tokens := {[scup_token_list, 
            { args(x.mBeta[1])[1] : x in followtokens | x.mBeta != []}] : 
        [scup_token_list, followtokens] in scup_action_tokens};
        if(!scup_mSilentMode)
        {
            print("scup_action_tokens :$scup_action_tokens$");               
        }
        scup_token_list := domain(scup_action_tokens);
        if(!scup_mSilentMode){
            print("scup_token_list :$scup_token_list$");               
        }
        if(#scup_token_list>0){
            if(#scup_token_list > 1){
                scup_token_list := [identifier : [identifier, follow_tokens] in scup_action_tokens | 
                    (follow_tokens * {scup_tl[scup_index+1][2]} != {}) ];
                if(#scup_token_list == 0){
                    scup_token_list := [identifier : [identifier, follow_tokens] in scup_action_tokens | 
                        (follow_tokens * {scup_tl[scup_index+1][2]} == {} && follow_tokens =={})];
                }
            } 
            if(!scup_mSilentMode){
                print("scup_token_list :$scup_token_list$");               
            }
            assert(#scup_token_list == 1, "Only one Possible Action for token in State");
            scup_token_id := arb(scup_token_list);     
        }
        return scup_token_id;
    };
    evaluate_action_code:= procedure(body, scup_user_code){
        //When the scup_user_code is  not empty, it is appended to a temporary list of commands which will be executed later on
        //As there might be multiple instances of the Rules which need to be reduced the variables are saved in a Stack-like structure
        // e.g. t_expr := [2 , 3 , Plus(4,5)];
        // the rule-id will be replaced with the last scup_index of the list
        // expr := t_expr[-1] := Plus(4,5);
        // afterwards the item will be removed from the list
        scup_action_code := [];
        if(scup_user_code == UserCode("") || scup_user_code == UserCode(@'') || args(scup_user_code)[1] == @'' || 
            args(scup_user_code)[1] == "" || #args(scup_user_code)[1] == 0){
            
            
         }
         else{
            scup_vars := {args(variable)[2] : variable in body | args(variable)[2] != ""};
            for(t_scup_vars in scup_vars){
                scup_action_code += ["t_$t_scup_vars$ := $t_scup_vars$;"];
                scup_action_code += ["$t_scup_vars$ := $t_scup_vars$[-1];"];
            }
            scup_action_code += [args(scup_user_code)[1]];
            for(t_scup_vars in scup_vars){
                scup_action_code += ["$t_scup_vars$ := t_$t_scup_vars$[..-2];"];
            }
         }
         return scup_action_code;
    };
     reduce_rule := procedure(scup_head, scup_body, rw scup_n, rw scup_symbols, rw scup_states, rw scup_symbols, 
        rw scup_state, rw scup_new_states, rw scup_states, rw scup_current_states){  
         scup_n       := #scup_body;
         scup_symbols := scup_symbols[.. -(scup_n+1)];
         scup_states  := scup_states[.. -(scup_n+1)]; 
         scup_symbols := scup_symbols + [scup_head];
         scup_state   := scup_states[-1];
         scup_new_states := scup_mGototable[scup_state, scup_head];
         scup_states  := scup_states + [ scup_new_states ];
         scup_current_states := scup_mStatetable[scup_new_states];
         
     };

     calculate_var_id := procedure(scup_tl, scup_index, scup_head, scup_current_states){
        // the id of the Rule-Variable is calculated from the Statetable where the Variable-name is the same as the one from the Rule-head and the where additionally the ID is not empty.
         // If there is more than one, the following are selected:
         // the ones, where Alpha (the tokens before the (*) marker) is not empty and
         // either: the tokens after the marker are not empty and there are still tokens to read and the first element from Beta is the next token to be read
         // or: it is the last sign to be read and Beta is empty
         // or: the following symbol is not in the the Followtokens of the rule andmBeta is not empty
         // the conjunction of both sets is made afterwards.         
         scup_var_id := [];
         scup_action_code := [];
         scup_var_id := {args(scup_mr.mAlpha[-1])[2] : scup_mr in scup_current_states | 
            (scup_mr.mAlpha != []) && ( args(scup_mr.mAlpha[-1])[1] == args(scup_head)[1]) 
            && args(scup_mr.mAlpha[-1])[2] != ""};
         if(#scup_var_id > 1){
            scup_alt_ids := {scup_mr : scup_mr in scup_current_states | scup_mr.mAlpha != []};
            scup_ne_beta := {args(scup_mr.mAlpha[-1])[2] : scup_mr in scup_alt_ids | 
             scup_mr.mBeta != [] &&(( #scup_tl>scup_index &&  
                args(scup_mr.mBeta[1])[1] == scup_tl[scup_index][2] ))};
            scup_e_beta := {args(scup_mr.mAlpha[-1])[2] : scup_mr in scup_alt_ids | scup_mr.mBeta == [] &&
            (#scup_tl == scup_index || scup_mr.mFollowSet * {scup_tl[scup_index][2]} != {})};
            scup_alt_ids := scup_ne_beta + scup_e_beta;            
            scup_var_id := scup_var_id * scup_alt_ids;                    

         }
         if(!scup_mSilentMode){
            print("scup_current_states : $scup_current_states$");
            print("scup_var_id : $scup_var_id$");
        }
         if(#scup_var_id > 0){
            assert(#scup_var_id ==1, "only one variable id should be used for one reduction");
            if(!scup_mSilentMode){
                print("scup_var_id : $scup_var_id$");
            }
            scup_action_code := "$arb(scup_var_id)$ += [result];";
         }
         return scup_action_code;
    };
    parseSR := procedure(scup_tl) {
        [scup_action_code, scup_index, scup_symbols, scup_states, scup_current_states] := init_vars();
        for(scup_action in [1..#scup_action_code]){
            if(!scup_mSilentMode){
                print("Executing command: $scup_action_code[scup_action]$");
            }
            execute(scup_action_code[scup_action]);
        }
        scup_action_code := [];
        while (true) {      
            scup_q := scup_states[-1];
            if(!scup_mSilentMode){
                print("scup_q :$scup_q$"); 
                print("scup_tl : $scup_tl$");
            }
            [scup_t_value, scup_t] := scup_tl[scup_index];
            scup_token_id := "";
            scup_token_id := calculate_token_id(scup_tl, scup_t, scup_q, scup_index);
            if(scup_token_id != ""){
                    scup_action_code := "$scup_token_id$ += ['$scup_t_value$'];";
                    if(!scup_mSilentMode){
                        print("Executing command: $scup_action_code$");
                    }
                    execute(scup_action_code);
            }
            scup_t := Token(scup_t , scup_token_id);             
            scup_t_rest := [ y : [x,y] in scup_tl[scup_index..]];
            if(!scup_mSilentMode){
                print("scup_states:  [ $join(scup_states, \", \")$ ]");
                print("scup_symbols: $join(scup_symbols, \" \")$ | $join(scup_t_rest, \" \")$");
                print("state:   { $join(scup_mStatetable[scup_q], \"\")$ }");
                print("scup_q,scup_t : $scup_q$,$scup_t$");
            }
            scup_p := scup_mActiontable[scup_q,scup_t];
            if(!scup_mSilentMode){
                  print("scup_p := scup_mActiontable[scup_q,scup_t]-----$scup_p$ := $scup_mActiontable[scup_q,scup_t]$");
            }
            match (scup_p) {
            case om: 
                if(!scup_mSilentMode){
                     print("action($scup_q$, $scup_t$) undefined.");
                     print("Syntax error!\n");
                }
                 return false;
            case Shift(scup_s):
                if(!scup_mSilentMode){
                     print("shifting state $scup_s$");
                     print("state:   { $join(scup_mStatetable[scup_s], \"\")$ }\n");
                }
                 scup_symbols := scup_symbols + [scup_t];
                 scup_states  := scup_states  + [scup_s];
                 scup_index   += 1;
            case Reduce(ruleName):
                 rule := scup_mrulesMap[ruleName];
                 [scup_head, scup_body , scup_user_code] := args(rule);
                 if(!scup_mSilentMode){
                    print("reducing with rule $ruleName$ : $scup_head$ -> $join(scup_body, \" \")$");
                 }
                 scup_action_code := evaluate_action_code(scup_body, scup_user_code);
                 for(scup_action in [1..#scup_action_code]){
                    if(!scup_mSilentMode){
                        print("Executing command: $scup_action_code[scup_action]$");
                    }
                    execute(scup_action_code[scup_action]);
                 }
                 scup_action_code := [];  
                 reduce_rule(scup_head, scup_body, scup_n, scup_symbols, scup_states, scup_symbols, 
                    scup_state, scup_new_states, scup_states, scup_current_states);
                 scup_action_code := calculate_var_id(scup_tl, scup_index, scup_head, scup_current_states);
                 if(isString(scup_action_code)){
                     if(!scup_mSilentMode){
                        print("Executing command: $scup_action_code$");
                     }
                    execute(scup_action_code);
                 }
                 if(!scup_mSilentMode){  
                    print("state:   { $join(scup_mStatetable[scup_mGototable[scup_state, scup_head]], \"\")$ }\n");
                }
            case Accept():
                 if(!scup_mSilentMode){ 
                    print("accepting\n");
                 }

                 return result;
            } 
        }
    };
}
myParse := closure(testInput, ruleNames, rulesMap, statetable, actiontable, gototable, silent_mode) {
    parser := srParser(actiontable, gototable, statetable, rulesMap, silent_mode);
    scup_tl := scan_string(join(readFile(testInput), "\n"));
    if(!silent_mode){
        print("tokenlist: $scup_tl$\n");
    }
    result := parser.parseSR(scup_tl + [[@"$", @"$"]]);
    return result;

};



/* The objects of this class represent extended marked rules of the form
   variable -> alpha * beta : L user_code.
*/
class markedRule(variable, alpha, beta, followSet, user_code) {
    this.mVariable  := variable;
    this.mAlpha     := alpha;
    this.mBeta      := beta;
    this.mFollowSet := followSet;
    this.mUser_Code := user_code;
    // check whether the * is at the end of of the rule
    isComplete := procedure() { return mBeta == []; };
    nextVar    := procedure() {
        if (#mBeta > 0) {
            match (mBeta[1]) {
                case Var(var_name, var_id): return Var(var_name, "");
            }
        }
    };
    symbolAfterDot := procedure() {
        if (#mBeta > 0) { return mBeta[1]; }
    };
    restAfterVariable := procedure() {
        if (#mBeta > 1) { return mBeta[2..]; }
        return [];
    };
    moveDot := procedure() {
        return markedRule(mVariable, mAlpha + [mBeta[1]], mBeta[2..], mFollowSet, mUser_Code);
    };  
    // turn a marked rule into a grammar rule
    toRule := procedure() {
        return grammarRule(mVariable, mAlpha + mBeta, mUser_Code);
    };
    toParserRule := procedure(){
        [rargs, user_code ] := extractArgList(mAlpha + mBeta);
        if(this.mUser_Code == om){
            this.mUser_Code := UserCode('');
        }
        return Rule(mVariable, rargs, this.mUser_Code);
    };
    escapeDollarFollowSet := procedure(followSet)
    {
        newSet := {};
        for (t in followSet) {
            // print("t: $t$");
            t :=escapeDollar(t);
            // print("t: $t$");
            newSet += {t};
        }
        return newSet;
    };
    f_str := procedure() {
        rule := "markedRule($mVariable$,$mAlpha$,$mBeta$,$escapeDollarFollowSet(mFollowSet)$,$mUser_Code$)";
        return rule;
    };

  static {
    // take a core rule and attach a follow set
    createRule := procedure(cr, followSet) {
        return markedRule(cr.mVariable, cr.mAlpha, cr.mBeta, followSet, cr.user_code);
    };  
  }
}

// A coreRule is a markedRule without a follow set.
class coreRule(mr) {
    this.mVariable  := mr.mVariable;
    this.mAlpha     := mr.mAlpha;
    this.mBeta      := mr.mBeta;
    this.mUser_Code := mr.mUser_Code;

    static {
        equals := procedure(that) {
            return this.mVariable == that.mVariable &&
                   this.mAlpha    == that.mAlpha    &&
                   this.mBeta     == that.mBeta     &&
                   this.mUser_Code == that.mUser_Code;
        };
    }
}


/* This class represents a grammar rule. */
class grammarRule(variable, gamma, user_code) {
    this.mVariable := variable;
    this.mGamma    := gamma;
    this.mUser_Code := user_code;
    f_str := procedure() {
        return "grammarRule($mVariable$, $mGamma$, $mUser_Code$)";
    };
}
test_parser := procedure(input_file, silent_mode){
    try{
     [ruleNames, rulesMap, stateTable, actionTable, gotoTable] := getDefs();
      result := myParse(input_file, ruleNames, rulesMap, stateTable, actionTable, gotoTable, silent_mode);
    }
    catch(e){
      print("error while parsing : $e$");
    }
    if(!silent_mode){
      print("result := $result$;");
    }
    return result;
};
main := closure() {
  if (#params == 1){
    silent_mode := false;
    input_file := params[1];
    try{
     [ruleNames, rulesMap, stateTable, actionTable, gotoTable] := getDefs();
      result := myParse(input_file, ruleNames, rulesMap, stateTable, actionTable, gotoTable, silent_mode);
    }
    catch(e){
      print("error while parsing : $e$");
    }
    if(!silent_mode){
      print("result := $result$;");
    }
    return result;
      
    }
};